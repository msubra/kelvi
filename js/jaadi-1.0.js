// Generated by CoffeeScript 1.6.3
/*
A basic jaadi plugin
*/

var ChromeLocalStoragePlugin, Jaadi, JaadiPlugin, W3CLocalStoragePlugin,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

JaadiPlugin = (function() {
  function JaadiPlugin(storage) {
    this.storage = storage != null ? storage : {};
  }

  JaadiPlugin.prototype.get = function(key) {};

  JaadiPlugin.prototype.put = function(key, value) {};

  JaadiPlugin.prototype.remove = function(key) {};

  JaadiPlugin.prototype.size = function() {};

  JaadiPlugin.prototype.items = function() {
    var key, val, _items, _ref;
    _items = [];
    _ref = this._storage;
    for (key in _ref) {
      val = _ref[key];
      _items.push([key, val]);
    }
    return _items;
  };

  return JaadiPlugin;

})();

/*
Storage plugin for Chrome Local Storage object
*/


ChromeLocalStoragePlugin = (function(_super) {
  __extends(ChromeLocalStoragePlugin, _super);

  function ChromeLocalStoragePlugin() {
    this.storage = chrome.storage.local;
  }

  ChromeLocalStoragePlugin.prototype.get = function(key) {
    return JSON.parse(this.storage.get(key));
  };

  ChromeLocalStoragePlugin.prototype.put = function(key, value) {
    return this.storage.put(key, JSON.stringify(value));
  };

  ChromeLocalStoragePlugin.prototype.remove = function(key) {
    return this.storage.remove(key);
  };

  ChromeLocalStoragePlugin.prototype.size = function() {
    return this.storage.length;
  };

  return ChromeLocalStoragePlugin;

})(JaadiPlugin);

/*
Storage plugin for W3C DOM Local Storage object
*/


W3CLocalStoragePlugin = (function(_super) {
  __extends(W3CLocalStoragePlugin, _super);

  function W3CLocalStoragePlugin() {
    this.storage = window.localStorage;
  }

  W3CLocalStoragePlugin.prototype.get = function(key) {
    return JSON.parse(this.storage.getItem(key));
  };

  W3CLocalStoragePlugin.prototype.put = function(key, value) {
    return this.storage.setItem(key, JSON.stringify(value));
  };

  W3CLocalStoragePlugin.prototype.remove = function(key) {
    return this.storage.removeItem(key);
  };

  W3CLocalStoragePlugin.prototype.size = function() {
    return this.storage.length;
  };

  return W3CLocalStoragePlugin;

})(JaadiPlugin);

Jaadi = (function() {
  /*
      default javascript DOM storage implementation
  */

  var DomStoragePlugin,
    _this = this;

  function Jaadi() {}

  DomStoragePlugin = (function(_super) {
    __extends(DomStoragePlugin, _super);

    function DomStoragePlugin() {
      this._container = {};
    }

    DomStoragePlugin.prototype.get = function(key) {
      return this._container[key];
    };

    DomStoragePlugin.prototype.put = function(key, value) {
      return this._container[key] = value;
    };

    DomStoragePlugin.prototype.remove = function(key) {
      return delete this._container[key];
    };

    DomStoragePlugin.prototype.size = function() {
      var key, length, val, _ref;
      length = 0;
      console.log(this._container);
      _ref = this._container;
      for (key in _ref) {
        val = _ref[key];
        length++;
      }
      return length;
    };

    DomStoragePlugin.prototype.items = function() {
      var key, val, _items, _ref;
      _items = [];
      _ref = this._container;
      for (key in _ref) {
        val = _ref[key];
        _items.push([key, val]);
      }
      return _items;
    };

    return DomStoragePlugin;

  })(JaadiPlugin);

  Jaadi.createInstance = function(name) {
    var jaadiType;
    try {
      jaadiType = Jaadi.plugins.get(name);
      if ('__super__' in jaadiType) {
        jaadiType = new jaadiType;
      } else if (typeof jaadiType === "function") {
        jaadiType = jaadiType.call();
      }
    } catch (_error) {
      jaadiType = new DomStoragePlugin();
    }
    return jaadiType;
  };

  Jaadi.plugins = new DomStoragePlugin();

  Jaadi.plugins.add = function(key, value) {
    return this.put(key, value);
  };

  Jaadi.plugins.add("dom", DomStoragePlugin);

  Jaadi.plugins.add("localstorage", function() {
    try {
      window.localStorage;
      if (!window["locplugin"]) {
        window["locplugin"] = new W3CLocalStoragePlugin();
      }
    } catch (_error) {
      if (chrome && (chrome.storage != null)) {
        if (!window["locplugin"]) {
          window["locplugin"] = new ChromeLocalStoragePlugin();
        }
      }
    }
    return window["locplugin"];
  });

  return Jaadi;

}).call(this);
