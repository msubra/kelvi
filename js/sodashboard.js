// Generated by CoffeeScript 1.6.3
var KelviDashboard, KelviTopic, SYMBOL_CODE_MAP, toQueryString, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

toQueryString = function(params) {
  var k, qs, v;
  qs = "";
  for (k in params) {
    v = params[k];
    qs += "" + k + "=" + (encodeURIComponent(v)) + "&";
  }
  return qs;
};

KelviDashboard = (function(_super) {
  __extends(KelviDashboard, _super);

  function KelviDashboard() {
    _ref = KelviDashboard.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  return KelviDashboard;

})(Dashboard);

SYMBOL_CODE_MAP = {
  "#": "_hash_",
  "+": "_plus_",
  "-": "_minus_",
  "$": "_dollar_",
  "%": "_percent_",
  ".": "_dot_"
};

/*
Fetch the config for the given topic. If a 'topic' is not found, then return the default settings.
If a topic has its own settings, verify it has all required settings. Any attribute not found, derive it from 'default'
*/


KelviTopic = (function(_super) {
  var fn, hook, hooks;

  __extends(KelviTopic, _super);

  hooks = {
    "dataloadInit": function() {},
    "dataloadComplete": function() {},
    "dataLoader": function() {}
  };

  for (hook in hooks) {
    fn = hooks[hook];
    KelviTopic.prototype[hook] = fn;
  }

  KelviTopic.prototype.watches = function() {
    var k, output, w, _i, _len, _ref1;
    output = [];
    _ref1 = this._watches;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      k = _ref1[_i];
      w = this._watches[k];
      if ("enable" in k && k.enable === false) {
        continue;
      }
      output.push(k);
    }
    return output;
  };

  KelviTopic.prototype.getConfig = function() {
    var cfg, cloned_cfg, common_cfg, k, w, _ref1;
    common_cfg = GlobalConfig["default"];
    if (this.topic in GlobalConfig.topics) {
      cfg = GlobalConfig.topics[this.topic];
      cloned_cfg = jQuery.extend(true, {}, cfg);
      cloned_cfg = compareAndCopy(cloned_cfg, common_cfg);
      _ref1 = cloned_cfg.watches;
      for (k in _ref1) {
        w = _ref1[k];
        w.query.tagged = this.topic;
      }
      return cloned_cfg;
    }
    return common_cfg;
  };

  function KelviTopic(topic, url, count, refresh) {
    var k, v, w;
    this.topic = topic;
    this.count = count;
    this.response = {};
    this.config = this.getConfig();
    this.config.questionsCount = this.count = this.count || this.config.questionsCount;
    this.config.refreshRate = refresh = refresh || this.config.refreshRate;
    console.log(this.config);
    KelviTopic.__super__.constructor.call(this, this.topic, {
      "config": this.config
    });
    w = this.config.watches;
    this._watches = [];
    for (k in w) {
      v = w[k];
      this._watches.push(v);
    }
  }

  KelviTopic.prototype.getURL = function(watchConfig) {
    var qs;
    qs = toQueryString(watchConfig.query);
    return "" + watchConfig.url + "?" + qs;
  };

  KelviTopic.prototype.questions = function(watch) {
    return this.response[watch];
  };

  KelviTopic.prototype.show = function(watchToShow) {
    var w, _i, _len, _ref1, _results;
    _ref1 = this.watches();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      w = _ref1[_i];
      if (watchToShow.category === w.category) {
        _results.push(w.show = true);
      } else {
        _results.push(w.show = false);
      }
    }
    return _results;
  };

  KelviTopic.prototype.init = function() {
    /*
    		answer_count: 2
    		community_owned: false
    		creation_date: 1388108504
    		down_vote_count: 0
    		favorite_count: 0
    		last_activity_date: 1388111290
    		last_edit_date: 1388108600
    		owner: Object
    		question_answers_url: "/questions/20793590/answers"
    		question_comments_url: "/questions/20793590/comments"
    		question_id: 20793590
    		question_timeline_url: "/questions/20793590/timeline"
    		score: 0
    		tags: Array[4]
    		title: "Binding json, that has a list, with an object using Jackson"
    		up_vote_count: 0
    		view_count: 9
    */

    var callback_name, transformQuestions, watch, _fn, _i, _len, _ref1,
      _this = this;
    transformQuestions = function(data) {
      var qn, questions, _i, _len, _ref1;
      questions = [];
      _ref1 = data['questions'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        qn = _ref1[_i];
        if ('closed_reason' in qn) {
          continue;
        }
        questions.push({
          question_id: qn.question_id,
          title: qn.title,
          url: qn.question_answers_url,
          up_vote: qn.up_vote_count,
          down_vote: qn.down_vote_count,
          answers: qn.answer_count,
          bounty: ('bounty_closes_date' in qn) && qn.bounty_closes_date * 1000 <= new Date().getTime() && ('bounty_amount' in qn) ? qn.bounty_amount : null
        });
        if (questions.length >= _this.count) {
          break;
        }
      }
      return questions;
    };
    _ref1 = this._watches;
    _fn = function(callback_name, watch, response, dataloadComplete) {
      _this.response = response;
      _this.dataloadComplete = dataloadComplete;
      console.log("creating " + callback_name);
      return window[callback_name] = function(data) {
        if (_this.dataloadComplete && typeof _this.dataloadComplete === 'function') {
          _this.dataloadComplete();
        }
        response[watch.category] = transformQuestions(data);
      };
    };
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      watch = _ref1[_i];
      if (!watch.enable === true) {
        continue;
      }
      callback_name = "callback_" + (this.encodedCallbackName()) + "_" + watch.category;
      _fn(callback_name, watch, this.response, this.dataloadComplete);
    }
    return (function(_this, refreshRate) {
      return window.setInterval(function() {
        return _this.update();
      }, refreshRate);
    })(this, this.config.refreshRate);
  };

  KelviTopic.prototype.encodedCallbackName = function() {
    var callback_topic, match, matches, _i, _len;
    callback_topic = this.topic;
    matches = callback_topic.match(/[$%#.+-]/g) || [];
    for (_i = 0, _len = matches.length; _i < _len; _i++) {
      match = matches[_i];
      callback_topic = callback_topic.replace(match, SYMBOL_CODE_MAP[match]);
      console.log("matches", match, callback_topic);
    }
    return callback_topic;
  };

  KelviTopic.prototype.update = function() {
    var encodedTopic, url, watchCfg, _i, _len, _ref1;
    _ref1 = this._watches;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      watchCfg = _ref1[_i];
      url = this.getURL(watchCfg);
      encodedTopic = encodeURIComponent(this.topic);
      url = "" + url + "callback=JSON_CALLBACK&jsonp=callback_" + (this.encodedCallbackName()) + "_" + watchCfg.category;
      if (this.dataLoader && typeof this.dataLoader === 'function') {
        if (this.dataloadInit && typeof this.dataloadInit === 'function') {
          this.dataloadInit();
        }
        this.dataLoader(url);
      }
    }
  };

  return KelviTopic;

})(Panel);
